import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-BKzoUWD5.js";const e={},n=t(`<h1 id="composer本地代码作为源库" tabindex="-1"><a class="header-anchor" href="#composer本地代码作为源库"><span>composer本地代码作为源库</span></a></h1><p>鉴于众所周知的情况，再不更新的前提下，直接使用本地的扩展包对系统进行升级，高端，快速，酸爽。</p><h3 id="方案1" tabindex="-1"><a class="header-anchor" href="#方案1"><span>方案1</span></a></h3><p>这种方案的多层依赖问题会在安装扩展的时候体现。</p><ol><li><p>首先，在开发的项目使用 <code>composer show</code> ，检查需要使用的插件的版本。</p></li><li><p>在对应插件的根目录的 <code>composer.json</code> 文件里面，查看是否有对用的 <code>version</code> 字段。</p></li><li><p>没有则添加查找到的版本号 <code>version: 2.1.3</code> 。</p></li><li><p>在更新的项目的 <code>composer.json</code> 文件中，修改或添加对应的字段。如下：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">	&quot;prefer-stable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, # 优先使用更稳定的包版本</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;repositories&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">        &quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">#</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 仓库路径类型</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">            &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;E:/composer_source/vendor/*/*&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> #</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 本地仓库路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">        &quot;packagist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> #</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 禁用packagist</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>和远程一样正常执行命令 <code>composer request xx/xx *</code>。</p></li></ol><h3 id="方案2" tabindex="-1"><a class="header-anchor" href="#方案2"><span>方案2</span></a></h3><p>这种方案需要考虑多层依赖问题。可能会出现当时调试没有问题，运行一段时间出现问题的情况。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;autoload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;psr-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">        &quot;App</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">Controller</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app/controller&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">        &quot;App</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">Model</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app/model&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }, </span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">#</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 自动加载规范。key为项目中引用类时的namespace，value为自定义类namespace。要注意key中需要两个\\\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app/controller/index.php&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">#</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 引入单个文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;classmap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app/controller&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">#</span><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;"> 引入文件夹下所有文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上三中方式都可以映入自定义类或者函数。 执行 <code> composer update</code> ,不推荐使用，最好使用<code> composer install</code> 。 开发中间加入的情况下，直接执行 <code>composer dump-autoload</code> 即可。</p><blockquote><p>https://ask.csdn.net/questions/3749907</p><p><a href="ttps://blog.csdn.net/nextvary/article/details/100671287" target="_blank" rel="noopener noreferrer">PHP Composer 加载本地扩展包</a></p></blockquote>`,10),l=[n];function h(p,k){return a(),s("div",null,l)}const d=i(e,[["render",h],["__file","composer本地代码作为源库.html.vue"]]),c=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/composer%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%BD%9C%E4%B8%BA%E6%BA%90%E5%BA%93.html","title":"composer本地代码作为源库","lang":"zh-CN","frontmatter":{"title":"composer本地代码作为源库","icon":"fab fa-markdown","order":2,"category":["技术记录"],"tag":["技术","随笔"],"date":"2024-05-31T00:00:00.000Z","description":"composer本地代码作为源库 鉴于众所周知的情况，再不更新的前提下，直接使用本地的扩展包对系统进行升级，高端，快速，酸爽。 方案1 这种方案的多层依赖问题会在安装扩展的时候体现。 首先，在开发的项目使用 composer show ，检查需要使用的插件的版本。 在对应插件的根目录的 composer.json 文件里面，查看是否有对用的 versi...","head":[["meta",{"property":"og:url","content":"https://jijacky.github.io/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/composer%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%BD%9C%E4%B8%BA%E6%BA%90%E5%BA%93.html"}],["meta",{"property":"og:title","content":"composer本地代码作为源库"}],["meta",{"property":"og:description","content":"composer本地代码作为源库 鉴于众所周知的情况，再不更新的前提下，直接使用本地的扩展包对系统进行升级，高端，快速，酸爽。 方案1 这种方案的多层依赖问题会在安装扩展的时候体现。 首先，在开发的项目使用 composer show ，检查需要使用的插件的版本。 在对应插件的根目录的 composer.json 文件里面，查看是否有对用的 versi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T10:05:17.000Z"}],["meta",{"property":"article:author","content":"Veeooo"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:tag","content":"随笔"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T10:05:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"composer本地代码作为源库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-06T10:05:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Veeooo\\",\\"url\\":\\"https://github.com/jijacky\\"}]}"]]},"headers":[{"level":3,"title":"方案1","slug":"方案1","link":"#方案1","children":[]},{"level":3,"title":"方案2","slug":"方案2","link":"#方案2","children":[]}],"git":{"createdTime":1717668317000,"updatedTime":1717668317000,"contributors":[{"name":"jijacky","email":"jijacky@126.com","commits":1}]},"readingTime":{"minutes":1.42,"words":426},"filePathRelative":"技术记录/composer本地代码作为源库.md","localizedDate":"2024年5月31日","excerpt":"\\n<p>鉴于众所周知的情况，再不更新的前提下，直接使用本地的扩展包对系统进行升级，高端，快速，酸爽。</p>\\n<h3>方案1</h3>\\n<p>这种方案的多层依赖问题会在安装扩展的时候体现。</p>\\n<ol>\\n<li>\\n<p>首先，在开发的项目使用 <code>composer show</code> ，检查需要使用的插件的版本。</p>\\n</li>\\n<li>\\n<p>在对应插件的根目录的 <code>composer.json</code> 文件里面，查看是否有对用的 <code>version</code> 字段。</p>\\n</li>\\n<li>\\n<p>没有则添加查找到的版本号 <code>version: 2.1.3</code> 。</p>\\n</li>\\n<li>\\n<p>在更新的项目的 <code>composer.json</code> 文件中，修改或添加对应的字段。如下：</p>\\n<div class=\\"language-json line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"json\\" data-title=\\"json\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\t\\"prefer-stable\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">true</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, # 优先使用更稳定的包版本</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">    \\"repositories\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E06C75\\">        \\"0\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E06C75\\">            \\"type\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"path\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\">#</span><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\"> 仓库路径类型</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E06C75\\">            \\"url\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"E:/composer_source/vendor/*/*\\"</span><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\"> #</span><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\"> 本地仓库路径</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">        },</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#005CC5;--shiki-dark:#E06C75\\">        \\"packagist\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">: </span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">false</span><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\"> #</span><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\"> 禁用packagist</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>和远程一样正常执行命令 <code>composer  request xx/xx *</code>。</p>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,c as data};
