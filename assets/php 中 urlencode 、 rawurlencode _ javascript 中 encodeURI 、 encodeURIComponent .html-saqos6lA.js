import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as n,d as r}from"./app-uJNbumND.js";const c={},d=r(`<h1 id="php-中-urlencode-、-rawurlencode-javascript-中-encodeuri-、-encodeuricomponent" tabindex="-1"><a class="header-anchor" href="#php-中-urlencode-、-rawurlencode-javascript-中-encodeuri-、-encodeuricomponent"><span>php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent</span></a></h1><p>在项目中，常常需要对 url 、 uri 进行编码和解码，数据也要编码后进行传输，因此，本文要讲的内容就非常重要。在一些测试中，我们发现，有的时候先进行 php 的 encodeurl 编码，然后再进行 decodeurl 解码，再用到 javascript 中，结果会发生一些错误。编码到解码，会出现一些差错，这是由于不同的函数依照不同的标准进行编写，所以经过编码，再解码，就可能会出现问题。</p><h2 id="php-中的-urlencode-和-urldecode" tabindex="-1"><a class="header-anchor" href="#php-中的-urlencode-和-urldecode"><span>PHP 中的 urlencode 和 urldecode</span></a></h2><p>urlencode 是最传统的 url 编码函数。特别是在 <code>&lt;form&gt;</code> 的数据传输中，php 在接收表单时，就是以 urlencode 的结果形式进行接收的，如果 <code>&lt;form&gt;</code> 的提交形式是 get ，你就可以在结果地址中看到。但是在 php 中使用 $_GET 、 $_POST 进行接收时，结果却是已经 urldecode 了的。官方文档的解释是：此编码与 WWW 表单 POST 数据的编码方式是一样的，同时与 <em>application/x-www-form-urlencoded</em> 的媒体类型编码方式一样。</p><p>urlencode 在编码中文和一些字符时，就是将其转换为对应的十六进制编码。</p><p>urldecode 在解码时，也有 GB2312 和 UTF-8 之分，主要是用在不同的搜索引擎中，谷歌雅虎使用的是 UTF-8 ，而百度则使用的是 GB2312 。如何在 GB2312 和 UTF-8 之间转换呢？主要用到 mb_convert_encoding 函数，具体这里就不赘述。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>中文 -&gt; GB2312 的 Encode -&gt; %D6%D0%CE%C4</span></span>
<span class="line"><span>中文 -&gt; UTF-8 的 Encode -&gt; %E4%B8%AD%E6%96%87</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="php-中的-rawurlencode-和-rawurldecode-及与-urlencode-的比较" tabindex="-1"><a class="header-anchor" href="#php-中的-rawurlencode-和-rawurldecode-及与-urlencode-的比较"><span>PHP 中的 rawurlencode 和 rawurldecode ，及与 urlencode 的比较</span></a></h2><p>urlencode 虽然主要用在数据提交和传输过程中，但是如果在构造 url 时， rawurlencode 更好。 rawurlencode 和 encode 的区别，主要是这两个函数编写时依据的标准不一样 rawurlencode 采用的是 RFC1738 编码，主要区别在于，对一些特殊字符的编码结果不同， rawurlencode 对更多的字符采用十六进制编码，特别是空格， urlencode 编码空格后是加号 + ，而 rawurlencode 编码空格后是 %20 。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>urlencode(&#39; &#39;) =&gt; +</span></span>
<span class="line"><span>rawurlencode(&#39; &#39;) =&gt; %20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>官方文档中指出，对 <code>~</code> 不再进行编码了。</p><h2 id="javascript-中的-encodeuri-和-decodeuri" tabindex="-1"><a class="header-anchor" href="#javascript-中的-encodeuri-和-decodeuri"><span>Javascript 中的 encodeURI 和 decodeURI</span></a></h2><p>rawurlencode 遵守是 94 年国际标准备忘录 RFC1738 ，而 Javascript 中的 encodeURI 也遵循该标准，所以从某种意义上， php 的 rawurlencode 的编码结果和 Javascript 的 encodeURI 的编码结果是一样的。</p><p>encodeURI 不编码字符有82个：<code>!#$&amp;&#39;()*+,-./:;=?@_~0-9a-zA-Z</code></p><h2 id="javascript-中的-encodeuricomponent-和-decodeuricomponent" tabindex="-1"><a class="header-anchor" href="#javascript-中的-encodeuricomponent-和-decodeuricomponent"><span>Javascript 中的 encodeURIComponent 和 decodeURIComponent</span></a></h2><p>encodeURIComponent 的意思非常明确，就是要对 uri 的组成部分进行编码，我们用下面的例子来解释。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>/test-url/测试.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 test-url 和测试 .html 这两个段就是 component ，如果要进行编码，就应该用 encodeURIComponent 。但是如果你用encodeURIComponent(&#39;/test-url/测试.html&#39;) 进行编码，就会对 &#39;/&#39; 也进行编码，整个URI会变成编码后的十六进制字符串。而 encodeURI 进行编码时，则不会对 &#39;/&#39; 进行编码，还是完整的 URI ，只不过对 uri component 进行了编码。</p><p>encodeURIComponent 不编码字符有71个：<code>!&#39;()*-._~0-9a-zA-Z</code>。缺少了：<code>#$&amp;+,/:;=@</code></p><p>故此，实际上，在 Javascript 的体系里，如果要对数据进行传输，要么不进行编码，要么使用 encodeURIComponent 编码，再进行传输，这样才能让数据解码后不变样。</p>`,20),a=[d];function t(p,i){return n(),o("div",null,a)}const u=e(c,[["render",t],["__file","php 中 urlencode 、 rawurlencode _ javascript 中 encodeURI 、 encodeURIComponent .html.vue"]]),h=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/php%20%E4%B8%AD%20urlencode%20%E3%80%81%20rawurlencode%20_%20javascript%20%E4%B8%AD%20encodeURI%20%E3%80%81%20encodeURIComponent%20.html","title":"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent","lang":"zh-CN","frontmatter":{"title":"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent","icon":"fab fa-markdown","order":2,"category":["技术记录"],"tag":["技术","随笔","PHP","JS","编码"],"article":false,"date":"2024-05-31T00:00:00.000Z","description":"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent 在项目中，常常需要对 url 、 uri 进行编码和解码，数据也要编码后进行传输，因此，本文要讲的内容就非常重要。在一些测试中，我们发现，有的时候先进行 php 的 encodeurl 编码，然后再进...","head":[["meta",{"property":"og:url","content":"https://jijacky.github.io/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/php%20%E4%B8%AD%20urlencode%20%E3%80%81%20rawurlencode%20_%20javascript%20%E4%B8%AD%20encodeURI%20%E3%80%81%20encodeURIComponent%20.html"}],["meta",{"property":"og:title","content":"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent"}],["meta",{"property":"og:description","content":"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent 在项目中，常常需要对 url 、 uri 进行编码和解码，数据也要编码后进行传输，因此，本文要讲的内容就非常重要。在一些测试中，我们发现，有的时候先进行 php 的 encodeurl 编码，然后再进..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-07T06:38:03.000Z"}],["meta",{"property":"article:author","content":"Veeooo"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:tag","content":"随笔"}],["meta",{"property":"article:tag","content":"PHP"}],["meta",{"property":"article:tag","content":"JS"}],["meta",{"property":"article:tag","content":"编码"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-07T06:38:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent\\",\\"description\\":\\"php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent 在项目中，常常需要对 url 、 uri 进行编码和解码，数据也要编码后进行传输，因此，本文要讲的内容就非常重要。在一些测试中，我们发现，有的时候先进行 php 的 encodeurl 编码，然后再进...\\"}"]]},"headers":[{"level":2,"title":"PHP 中的 urlencode 和 urldecode","slug":"php-中的-urlencode-和-urldecode","link":"#php-中的-urlencode-和-urldecode","children":[]},{"level":2,"title":"PHP 中的 rawurlencode 和 rawurldecode ，及与 urlencode 的比较","slug":"php-中的-rawurlencode-和-rawurldecode-及与-urlencode-的比较","link":"#php-中的-rawurlencode-和-rawurldecode-及与-urlencode-的比较","children":[]},{"level":2,"title":"Javascript 中的 encodeURI 和 decodeURI","slug":"javascript-中的-encodeuri-和-decodeuri","link":"#javascript-中的-encodeuri-和-decodeuri","children":[]},{"level":2,"title":"Javascript 中的 encodeURIComponent 和 decodeURIComponent","slug":"javascript-中的-encodeuricomponent-和-decodeuricomponent","link":"#javascript-中的-encodeuricomponent-和-decodeuricomponent","children":[]}],"git":{"createdTime":1717668317000,"updatedTime":1717742283000,"contributors":[{"name":"jijacky","email":"jijacky@126.com","commits":2}]},"readingTime":{"minutes":2.95,"words":886},"filePathRelative":"技术记录/php 中 urlencode 、 rawurlencode , javascript 中 encodeURI 、 encodeURIComponent .md","localizedDate":"2024年5月31日","excerpt":"\\n<p>在项目中，常常需要对 url 、 uri 进行编码和解码，数据也要编码后进行传输，因此，本文要讲的内容就非常重要。在一些测试中，我们发现，有的时候先进行 php 的 encodeurl 编码，然后再进行 decodeurl 解码，再用到 javascript 中，结果会发生一些错误。编码到解码，会出现一些差错，这是由于不同的函数依照不同的标准进行编写，所以经过编码，再解码，就可能会出现问题。</p>\\n<h2>PHP 中的 urlencode 和 urldecode</h2>\\n<p>urlencode 是最传统的 url 编码函数。特别是在 <code>&lt;form&gt;</code> 的数据传输中，php 在接收表单时，就是以 urlencode 的结果形式进行接收的，如果 <code>&lt;form&gt;</code> 的提交形式是 get ，你就可以在结果地址中看到。但是在 php 中使用 $_GET 、 $_POST 进行接收时，结果却是已经 urldecode 了的。官方文档的解释是：此编码与 WWW 表单 POST 数据的编码方式是一样的，同时与 <em>application/x-www-form-urlencoded</em> 的媒体类型编码方式一样。</p>","autoDesc":true}');export{u as comp,h as data};
