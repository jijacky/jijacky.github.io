import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as o}from"./app-uJNbumND.js";const l={},r=o('<h1 id="laravel项目安装部署" tabindex="-1"><a class="header-anchor" href="#laravel项目安装部署"><span>laravel项目安装部署</span></a></h1><p>laravel 项目默认会把 vendor 目录和 env 忽略掉，不进行版本控制。 所以安装的时候，需要单独安装</p><p>env 文件是配置文件，直接上传即可 vendor 文件比较麻烦。</p><ol><li>需要明确知道使用的项目有些什么依赖，也就是必须纳入 composer 的依赖管理里面。</li><li>部署（git、svn、copy等）完项目文件以后，检查文件下面是否有 composer.json 文件。</li><li>使用 composer install 安装依赖（除非你知道依赖升级更新以后没有兼容性问题，否则请不要使用 composer update ）。</li><li>确认项目使用的依赖里面有没有什么需要设置的，设置好。（比如 laravel 就需要执行 <code>php artisan key:generate</code> 生成新的 key 值</li><li>检查 config、yml、env 等文件的配置情况。</li><li>api 依赖</li><li>环境配置，比如 rewrite</li></ol><p>laravel 之异步队列</p><ol><li>配置对应的队列驱动比如 redis</li><li>不管是事件监听器还是任务 jobs ，都要实现队列接口 ShouldQueue</li><li>消费者类设置对应的链接名称与队列名称</li><li>启动伺服模式 <code>php artisan queue:work redis --queue=test --daemon</code></li><li>或者启动监听模式 <code>php php artisan queue:listen</code></li></ol>',6),i=[r];function n(p,c){return a(),t("div",null,i)}const m=e(l,[["render",n],["__file","laravel 项目安装部署.html.vue"]]),v=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/laravel%20%E9%A1%B9%E7%9B%AE%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2.html","title":"laravel 项目安装部署","lang":"zh-CN","frontmatter":{"title":"laravel 项目安装部署","icon":"fab fa-markdown","order":2,"category":["技术记录"],"tag":["技术","随笔"],"date":"2024-05-31T00:00:00.000Z","description":"laravel项目安装部署 laravel 项目默认会把 vendor 目录和 env 忽略掉，不进行版本控制。 所以安装的时候，需要单独安装 env 文件是配置文件，直接上传即可 vendor 文件比较麻烦。 需要明确知道使用的项目有些什么依赖，也就是必须纳入 composer 的依赖管理里面。 部署（git、svn、copy等）完项目文件以后，检查...","head":[["meta",{"property":"og:url","content":"https://jijacky.github.io/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/laravel%20%E9%A1%B9%E7%9B%AE%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2.html"}],["meta",{"property":"og:title","content":"laravel 项目安装部署"}],["meta",{"property":"og:description","content":"laravel项目安装部署 laravel 项目默认会把 vendor 目录和 env 忽略掉，不进行版本控制。 所以安装的时候，需要单独安装 env 文件是配置文件，直接上传即可 vendor 文件比较麻烦。 需要明确知道使用的项目有些什么依赖，也就是必须纳入 composer 的依赖管理里面。 部署（git、svn、copy等）完项目文件以后，检查..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T10:05:17.000Z"}],["meta",{"property":"article:author","content":"Veeooo"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:tag","content":"随笔"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T10:05:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"laravel 项目安装部署\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-06T10:05:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Veeooo\\",\\"url\\":\\"https://github.com/jijacky\\"}]}"]]},"headers":[],"git":{"createdTime":1717668317000,"updatedTime":1717668317000,"contributors":[{"name":"jijacky","email":"jijacky@126.com","commits":1}]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"技术记录/laravel 项目安装部署.md","localizedDate":"2024年5月31日","excerpt":"\\n<p>laravel 项目默认会把 vendor 目录和 env 忽略掉，不进行版本控制。\\n所以安装的时候，需要单独安装</p>\\n<p>env 文件是配置文件，直接上传即可\\nvendor 文件比较麻烦。</p>\\n<ol>\\n<li>需要明确知道使用的项目有些什么依赖，也就是必须纳入 composer 的依赖管理里面。</li>\\n<li>部署（git、svn、copy等）完项目文件以后，检查文件下面是否有 composer.json 文件。</li>\\n<li>使用 composer install 安装依赖（除非你知道依赖升级更新以后没有兼容性问题，否则请不要使用 composer update ）。</li>\\n<li>确认项目使用的依赖里面有没有什么需要设置的，设置好。（比如 laravel 就需要执行 <code>php artisan key:generate</code> 生成新的 key 值</li>\\n<li>检查 config、yml、env 等文件的配置情况。</li>\\n<li>api 依赖</li>\\n<li>环境配置，比如 rewrite</li>\\n</ol>","autoDesc":true}');export{m as comp,v as data};
