import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as i}from"./app--nBeKGPX.js";const t={},r=i(`<h3 id="laravel-db-orm-子查询" tabindex="-1"><a class="header-anchor" href="#laravel-db-orm-子查询"><span>Laravel DB ORM 子查询</span></a></h3><h4 id="子查询必须遵循以下规则" tabindex="-1"><a class="header-anchor" href="#子查询必须遵循以下规则"><span>子查询必须遵循以下规则：</span></a></h4><pre><code>- 子查询必须括在圆括号中
- 子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较
- 子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用
- 返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符
- SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用
- 子查询不能直接用在集合函数中 B- ETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中
</code></pre><h4 id="构建-raw-语句" tabindex="-1"><a class="header-anchor" href="#构建-raw-语句"><span>构建 raw 语句</span></a></h4><p>DB::raw 用于在查询中使用原始表达式。不仅限于 raw，也包括下述其他方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>selectRaw</span></span>
<span class="line"><span>whereRaw / orWhereRaw</span></span>
<span class="line"><span>havingRaw / orHavingRaw</span></span>
<span class="line"><span>orderByRaw</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用到的方法</p><ul><li>toSql() 获取不带 binding 参数的 SQL 语句</li><li>getQuery() 获取完整的 SQL 语句</li><li>mergeBindings() 将 binding 参数合并到查询中</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$sub = Abc::where(..)-&gt;groupBy(..); // Eloquent Builder instance</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$count = DB::table( DB::raw(&quot;({$sub-&gt;toSql()}) as sub&quot;) )</span></span>
<span class="line"><span>-&gt;mergeBindings($sub-&gt;getQuery()) </span></span>
<span class="line"><span>-&gt;count();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),s=[r];function l(o,d){return n(),a("div",null,s)}const h=e(t,[["render",l],["__file","Laravel DB ORM 子查询.html.vue"]]),m=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/Laravel%20DB%20ORM%20%E5%AD%90%E6%9F%A5%E8%AF%A2.html","title":"Laravel DB ORM 子查询","lang":"zh-CN","frontmatter":{"title":"Laravel DB ORM 子查询","icon":"fab fa-markdown","order":2,"category":["技术记录"],"tag":["技术","随笔"],"date":"2024-05-31T00:00:00.000Z","description":"Laravel DB ORM 子查询 子查询必须遵循以下规则： 构建 raw 语句 DB::raw 用于在查询中使用原始表达式。不仅限于 raw，也包括下述其他方法： 使用到的方法 toSql() 获取不带 binding 参数的 SQL 语句 getQuery() 获取完整的 SQL 语句 mergeBindings() 将 binding 参数合并...","head":[["meta",{"property":"og:url","content":"https://jijacky.github.io/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/Laravel%20DB%20ORM%20%E5%AD%90%E6%9F%A5%E8%AF%A2.html"}],["meta",{"property":"og:title","content":"Laravel DB ORM 子查询"}],["meta",{"property":"og:description","content":"Laravel DB ORM 子查询 子查询必须遵循以下规则： 构建 raw 语句 DB::raw 用于在查询中使用原始表达式。不仅限于 raw，也包括下述其他方法： 使用到的方法 toSql() 获取不带 binding 参数的 SQL 语句 getQuery() 获取完整的 SQL 语句 mergeBindings() 将 binding 参数合并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T10:05:17.000Z"}],["meta",{"property":"article:author","content":"Veeooo"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:tag","content":"随笔"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T10:05:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Laravel DB ORM 子查询\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-06T10:05:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Veeooo\\",\\"url\\":\\"https://github.com/jijacky\\"}]}"]]},"headers":[{"level":3,"title":"Laravel DB ORM 子查询","slug":"laravel-db-orm-子查询","link":"#laravel-db-orm-子查询","children":[]}],"git":{"createdTime":1717668317000,"updatedTime":1717668317000,"contributors":[{"name":"jijacky","email":"jijacky@126.com","commits":1}]},"readingTime":{"minutes":1.09,"words":328},"filePathRelative":"技术记录/Laravel DB ORM 子查询.md","localizedDate":"2024年5月31日","excerpt":"<h3>Laravel DB ORM 子查询</h3>\\n<h4>子查询必须遵循以下规则：</h4>\\n<pre><code>- 子查询必须括在圆括号中\\n- 子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较\\n- 子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用\\n- 返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符\\n- SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用\\n- 子查询不能直接用在集合函数中 B- ETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中\\n</code></pre>","autoDesc":true}');export{h as comp,m as data};
