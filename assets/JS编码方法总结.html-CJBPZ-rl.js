import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o,d as n}from"./app-uJNbumND.js";const c={},r=n("<p><strong>escape() 方法：</strong> 该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： <code>- _ . ! ~ * &#39; ( ) </code>。</p><p><strong>encodeURI() 方法：</strong> 该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： <code>- _ . ! ~ * &#39; ( ) </code>。 该方法的目的是对 URI 进行完整的编码，因此对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的：<code>;/?:@&amp;=+$,#</code></p><p><strong>encodeURIComponent() 方法：</strong> 该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： <code>- _ . ! ~ * &#39; ( ) </code>。 其他字符（比如 ：<code>;/?:@&amp;=+$,#</code> 这些用于分隔 URI 组件的标点符号），都是由一个或多个十六进制的转义序列替换的。</p><p><strong>encodeURIComponent() 函数 与 encodeURI() 函数的区别之处：</strong> 前者假定它的参数是 URI 的一部分（比如协议、主机名、路径或查询字符串），因此 encodeURIComponent() 函数将转义用于分隔 URI 各个部分的标点符号。</p><p><strong>总结：</strong> 通过对三个函数的分析，我们可以知道：escape()除了 ASCII 字母、数字和特定的符号外，对传进来的字符串全部进行转义编码，因此如果想对URL编码，最好不要使用此方法。 而encodeURI() 用于编码整个URI，因为URI中的合法字符都不会被编码转换。encodeURIComponent方法在编码单个URIComponent（指请求参数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</p>",5),a=[r];function p(I,d){return o(),t("div",null,a)}const s=e(c,[["render",p],["__file","JS编码方法总结.html.vue"]]),l=JSON.parse(`{"path":"/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/JS%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html","title":"JS编码方法总结","lang":"zh-CN","frontmatter":{"title":"JS编码方法总结","icon":"fab fa-markdown","order":2,"category":["技术记录"],"tag":["技术","随笔","JS","编码"],"date":"2024-06-06T00:00:00.000Z","description":"escape() 方法： 该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。 encodeURI() 方法： 该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。 该方法的目的是对 URI 进...","head":[["meta",{"property":"og:url","content":"https://jijacky.github.io/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/JS%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:title","content":"JS编码方法总结"}],["meta",{"property":"og:description","content":"escape() 方法： 该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。 encodeURI() 方法： 该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ' ( ) 。 该方法的目的是对 URI 进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T10:05:17.000Z"}],["meta",{"property":"article:author","content":"Veeooo"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:tag","content":"随笔"}],["meta",{"property":"article:tag","content":"JS"}],["meta",{"property":"article:tag","content":"编码"}],["meta",{"property":"article:published_time","content":"2024-06-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T10:05:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS编码方法总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-06T10:05:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Veeooo\\",\\"url\\":\\"https://github.com/jijacky\\"}]}"]]},"headers":[],"git":{"createdTime":1717668317000,"updatedTime":1717668317000,"contributors":[{"name":"jijacky","email":"jijacky@126.com","commits":1}]},"readingTime":{"minutes":1.46,"words":439},"filePathRelative":"技术记录/JS编码方法总结.md","localizedDate":"2024年6月6日","excerpt":"<p><strong>escape() 方法：</strong>\\n该方法不会对 ASCII 字母和数字进行编码，也不会对下面这些 ASCII 标点符号进行编码：\\n<code>- _ . ! ~ * ' ( ) </code>。</p>\\n<p><strong>encodeURI() 方法：</strong>\\n该方法不会对 ASCII 字母和数字进行编码，也不会对这些 ASCII 标点符号进行编码：\\n<code>- _ . ! ~ * ' ( ) </code>。\\n该方法的目的是对 URI 进行完整的编码，因此对以下在 URI 中具有特殊含义的 ASCII 标点符号，encodeURI() 函数是不会进行转义的：<code>;/?:@&amp;=+$,#</code></p>","autoDesc":true}`);export{s as comp,l as data};
