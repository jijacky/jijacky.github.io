import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as a}from"./app-uJNbumND.js";const n={},l=a(`<p>ffsdfsdf：ghp_eTmDDAphdK P1QJrgy7xuHyj7SxxTIT48maot</p><h2 id="git操作" tabindex="-1"><a class="header-anchor" href="#git操作"><span>git操作</span></a></h2><ul><li>worktree</li><li>stash</li><li>assume-valid 假定未变更</li></ul><h2 id="git-bash输错账号" tabindex="-1"><a class="header-anchor" href="#git-bash输错账号"><span>Git Bash输错账号</span></a></h2><p>Git Bash输错账号密码如何重新输入 解决办法：</p><ol><li>打开控制面板（快捷打开win+R，输入control）</li><li>点击打开用户账户</li><li>点击凭据管理器</li><li>点击windows凭据删除你的git凭据即可。</li></ol><h2 id="git-切换账号" tabindex="-1"><a class="header-anchor" href="#git-切换账号"><span>Git 切换账号</span></a></h2><ol><li>打开 Git Bash</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$  git config --global user.name &quot;用户名&quot;</span></span>
<span class="line"><span>$  git config --global user.email &quot;邮箱&quot;</span></span>
<span class="line"><span>$  git config --global user.password= &quot;密码&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果如上语句不起作用，则用下面语句</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>$  git config --global --replace-all user.email &quot;邮箱&quot; </span></span>
<span class="line"><span>$  git config --global --replace-all user.name &quot;用户名&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>修改之后可以通过$ git config --list 查看是否修改成功</p></li><li><p>如果执行以上修改之后，仍然提示没有权限，取消git的SSL校验</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git config --global http.sslVerify false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="git-移动文件时的大小写问题" tabindex="-1"><a class="header-anchor" href="#git-移动文件时的大小写问题"><span>git 移动文件时的大小写问题</span></a></h3><p>直接用 git mv 没有问题，你可以试试 git mv --force file File git mv 的时候，ignorecase 必须是 true 才可以，如果是 false 报错</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git config core.ignorecase false</span></span>
<span class="line"><span>$ git mv test.txt Test.txt</span></span>
<span class="line"><span>git config --global core.ignorecase false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除保存在本地的git账户" tabindex="-1"><a class="header-anchor" href="#删除保存在本地的git账户"><span>删除保存在本地的git账户</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git credential-manager uninstall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>缓存账户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git config --global credential.helper wincred</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="账户密码问题" tabindex="-1"><a class="header-anchor" href="#账户密码问题"><span>账户密码问题</span></a></h2><p>git credential manager for windows解决方法 换电脑之后因为git 账号问题修改了git账号密码，但问题出现了， 每次都让输入账号密码，window的一遍，git的一遍。之后git设置 可以保存密码，但window安全中心却每次都让输入密码解决方法。</p><p>一，保存 git 的密码</p><ul><li>.gitconfig 文件中添加 <code>[credential] helper = store</code></li><li>或者在git bash 中执行 <code>git config --global credential.helper store</code></li></ul><p>之后只需输入一次密码即可</p><p>二、去掉每次window 安全中心验证</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git credential-manager uninstall</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行后安全中心验证不在弹出</p><h2 id="git-add-操作时-有时会误添加一些不想提交的文件-如何解决" tabindex="-1"><a class="header-anchor" href="#git-add-操作时-有时会误添加一些不想提交的文件-如何解决"><span>git add 操作时，有时会误添加一些不想提交的文件，如何解决？</span></a></h2><ol><li>误add单个文件 <code>git reset HEAD</code> 将file退回到unstage区</li><li>误add多个文件，只撤销部分文件 <code>git reset HEAD</code> 将file退回到unstage区</li></ol><p>git add 添加 多余文件 ，这样的错误是由于， 有的时候 可能<code>git add .</code> （空格+ 点） 表示当前目录所有文件，不小心就会提交其他文件 <code>git add</code> 如果添加了错误的文件的话，则需要撤销操作</p><ol><li>git status 先看一下add 中的文件</li><li>git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了</li><li>git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了</li></ol><h2 id="git-rm-与-git-reset的区别" tabindex="-1"><a class="header-anchor" href="#git-rm-与-git-reset的区别"><span>git rm 与 git reset的区别</span></a></h2><ul><li><p>git rm：用于从工作区和索引中删除文件</p></li><li><p>git reset：用于将当前HEAD复位到指定状态。一般用于撤消之前的一些操作(如：git add,git commit等)。</p></li><li><p>git rm file_path 删除暂存区和分支上的文件，同时工作区也不需要</p></li><li><p>git rm --cached file_path 删除暂存区或分支上的文件, 但工作区需要使用, 只是不希望被版本控制（适用于已经被git add,但是又想撤销的情况）</p></li><li><p>git reset HEAD 回退暂存区里的文件</p></li></ul><h2 id="假定未变更" tabindex="-1"><a class="header-anchor" href="#假定未变更"><span>假定未变更</span></a></h2><p>Git/TortoiseGit 查看/取消(no-assume-unchanged)所有假定未变更(assume-valid)文件 查看所有假定未变更：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git ls-files -v|grep &quot;^h&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>取消所有假定已未变更：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git update-index --no-assume-unchanged &lt;file&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>https://www.cnblogs.com/yehuisir/p/12325717.html</p></blockquote><blockquote><p>http://einverne.github.io/post/2019/03/git-worktree.html</p></blockquote><h2 id="alias" tabindex="-1"><a class="header-anchor" href="#alias"><span>alias</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>alias gs=&quot;git status&quot; # to see changes that have been staged and which haven&#39;t</span></span>
<span class="line"><span>alias gac=&quot;git add . &amp;&amp; git commit -m&quot; # to stage and commit changes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-push-and-pull" tabindex="-1"><a class="header-anchor" href="#git-push-and-pull"><span>git push and pull</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>alias gp=&quot;git push&quot; # + remote &amp; branch names</span></span>
<span class="line"><span>alias gl=&quot;git pull&quot; # + remote &amp; branch names</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pushing-pulling-to-origin-remote" tabindex="-1"><a class="header-anchor" href="#pushing-pulling-to-origin-remote"><span>Pushing/pulling to origin remote</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>alias gpo=&quot;git push origin&quot; # + branch name</span></span>
<span class="line"><span>alias glo=&quot;git pull origin&quot; # + branch name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pushing-pulling-to-origin-remote-master-branch" tabindex="-1"><a class="header-anchor" href="#pushing-pulling-to-origin-remote-master-branch"><span>Pushing/pulling to origin remote, master branch</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>alias gpom=&quot;git push origin master&quot;</span></span>
<span class="line"><span>alias glom=&quot;git pull origin master&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>alias gcb=&quot;git checkout -b&quot; # To create a new branch and checkout into it</span></span>
<span class="line"><span>alias go=&quot;git checkout&quot;</span></span>
<span class="line"><span>alias gom=&quot;git checkout master&quot;</span></span>
<span class="line"><span>alias gre=&quot;git rebase&quot;</span></span>
<span class="line"><span>alias gd=&#39;git diff&#39; </span></span>
<span class="line"><span>alias glo=&quot;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在 ~/.gitconfig 文件里面进行别名设置，即加上下面这几行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[alias]  </span></span>
<span class="line"><span>st = status  </span></span>
<span class="line"><span>ci = commit  </span></span>
<span class="line"><span>br = branch  </span></span>
<span class="line"><span>co = checkout  </span></span>
<span class="line"><span>df = diff  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>co = checkout		//输入git co =&gt; git checkout</span></span>
<span class="line"><span>st = status			//输入git st =&gt; git status</span></span>
<span class="line"><span>cm = commit -m		//输入git cm =&gt; git commit -m</span></span>
<span class="line"><span>br = branch			//输入git br =&gt; git branch </span></span>
<span class="line"><span>dif = diff			//输入git dif =&gt; git diff </span></span>
<span class="line"><span>pl = pull			//输入git pl =&gt; git pull</span></span>
<span class="line"><span>ps = push			//输入git ps =&gt; git push</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[alias]</span></span>
<span class="line"><span>br = branch</span></span>
<span class="line"><span>ci = commit</span></span>
<span class="line"><span>cl = clone</span></span>
<span class="line"><span>co = checkout</span></span>
<span class="line"><span>cp = cherry-pick</span></span>
<span class="line"><span>cfg = clone</span></span>
<span class="line"><span>df = diff</span></span>
<span class="line"><span>fh = fetch</span></span>
<span class="line"><span>lg = &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot;</span></span>
<span class="line"><span>mg = merge</span></span>
<span class="line"><span>pl = pull</span></span>
<span class="line"><span>plr = pull --rebase</span></span>
<span class="line"><span>rb = rebase</span></span>
<span class="line"><span>ph = push</span></span>
<span class="line"><span>rmt = remote</span></span>
<span class="line"><span>rst = reset</span></span>
<span class="line"><span>sh = stash</span></span>
<span class="line"><span>st = status</span></span>
<span class="line"><span>sts = status -s</span></span>
<span class="line"><span>sbm = submodule</span></span>
<span class="line"><span>sw = show</span></span>
<span class="line"><span>swf = &quot;show --name-status&quot;</span></span>
<span class="line"><span>delb = &quot;push origin --delete&quot;</span></span>
<span class="line"><span>delt = &quot;push origin :&quot;</span></span>
<span class="line"><span>mb = merge-base</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,54),t=[l];function d(r,p){return e(),s("div",null,t)}const g=i(n,[["render",d],["__file","git操作.html.vue"]]),o=JSON.parse('{"path":"/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/git%E6%93%8D%E4%BD%9C.html","title":"git操作","lang":"zh-CN","frontmatter":{"title":"git操作","icon":"fab fa-markdown","order":2,"category":["技术记录"],"tag":["技术","随笔"],"date":"2024-05-31T00:00:00.000Z","description":"ffsdfsdf：ghp_eTmDDAphdK P1QJrgy7xuHyj7SxxTIT48maot git操作 worktree stash assume-valid 假定未变更 Git Bash输错账号 Git Bash输错账号密码如何重新输入 解决办法： 打开控制面板（快捷打开win+R，输入control） 点击打开用户账户 点击凭据管理器 点...","head":[["meta",{"property":"og:url","content":"https://jijacky.github.io/%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/git%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:title","content":"git操作"}],["meta",{"property":"og:description","content":"ffsdfsdf：ghp_eTmDDAphdK P1QJrgy7xuHyj7SxxTIT48maot git操作 worktree stash assume-valid 假定未变更 Git Bash输错账号 Git Bash输错账号密码如何重新输入 解决办法： 打开控制面板（快捷打开win+R，输入control） 点击打开用户账户 点击凭据管理器 点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T10:05:17.000Z"}],["meta",{"property":"article:author","content":"Veeooo"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:tag","content":"随笔"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T10:05:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-06T10:05:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Veeooo\\",\\"url\\":\\"https://github.com/jijacky\\"}]}"]]},"headers":[{"level":2,"title":"git操作","slug":"git操作","link":"#git操作","children":[]},{"level":2,"title":"Git Bash输错账号","slug":"git-bash输错账号","link":"#git-bash输错账号","children":[]},{"level":2,"title":"Git 切换账号","slug":"git-切换账号","link":"#git-切换账号","children":[{"level":3,"title":"git 移动文件时的大小写问题","slug":"git-移动文件时的大小写问题","link":"#git-移动文件时的大小写问题","children":[]},{"level":3,"title":"删除保存在本地的git账户","slug":"删除保存在本地的git账户","link":"#删除保存在本地的git账户","children":[]}]},{"level":2,"title":"账户密码问题","slug":"账户密码问题","link":"#账户密码问题","children":[]},{"level":2,"title":"git add 操作时，有时会误添加一些不想提交的文件，如何解决？","slug":"git-add-操作时-有时会误添加一些不想提交的文件-如何解决","link":"#git-add-操作时-有时会误添加一些不想提交的文件-如何解决","children":[]},{"level":2,"title":"git rm 与 git reset的区别","slug":"git-rm-与-git-reset的区别","link":"#git-rm-与-git-reset的区别","children":[]},{"level":2,"title":"假定未变更","slug":"假定未变更","link":"#假定未变更","children":[]},{"level":2,"title":"alias","slug":"alias","link":"#alias","children":[]},{"level":2,"title":"git push and pull","slug":"git-push-and-pull","link":"#git-push-and-pull","children":[]},{"level":2,"title":"Pushing/pulling to origin remote","slug":"pushing-pulling-to-origin-remote","link":"#pushing-pulling-to-origin-remote","children":[]},{"level":2,"title":"Pushing/pulling to origin remote, master branch","slug":"pushing-pulling-to-origin-remote-master-branch","link":"#pushing-pulling-to-origin-remote-master-branch","children":[]}],"git":{"createdTime":1717668317000,"updatedTime":1717668317000,"contributors":[{"name":"jijacky","email":"jijacky@126.com","commits":1}]},"readingTime":{"minutes":4.08,"words":1223},"filePathRelative":"技术记录/git操作.md","localizedDate":"2024年5月31日","excerpt":"<p>ffsdfsdf：ghp_eTmDDAphdK P1QJrgy7xuHyj7SxxTIT48maot</p>\\n<h2>git操作</h2>\\n<ul>\\n<li>worktree</li>\\n<li>stash</li>\\n<li>assume-valid 假定未变更</li>\\n</ul>\\n<h2>Git Bash输错账号</h2>\\n<p>Git Bash输错账号密码如何重新输入\\n解决办法：</p>\\n<ol>\\n<li>打开控制面板（快捷打开win+R，输入control）</li>\\n<li>点击打开用户账户</li>\\n<li>点击凭据管理器</li>\\n<li>点击windows凭据删除你的git凭据即可。</li>\\n</ol>","autoDesc":true}');export{g as comp,o as data};
